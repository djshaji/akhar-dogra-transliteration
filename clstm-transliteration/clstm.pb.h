// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clstm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clstm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clstm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clstm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clstm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clstm_2eproto;
namespace clstm {
class Array;
class ArrayDefaultTypeInternal;
extern ArrayDefaultTypeInternal _Array_default_instance_;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class NetworkProto;
class NetworkProtoDefaultTypeInternal;
extern NetworkProtoDefaultTypeInternal _NetworkProto_default_instance_;
}  // namespace clstm
PROTOBUF_NAMESPACE_OPEN
template<> ::clstm::Array* Arena::CreateMaybeMessage<::clstm::Array>(Arena*);
template<> ::clstm::KeyValue* Arena::CreateMaybeMessage<::clstm::KeyValue>(Arena*);
template<> ::clstm::NetworkProto* Arena::CreateMaybeMessage<::clstm::NetworkProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace clstm {

// ===================================================================

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clstm.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clstm.KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clstm_2eproto);
    return ::descriptor_table_clstm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:clstm.KeyValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_clstm_2eproto;
};
// -------------------------------------------------------------------

class Array PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clstm.Array) */ {
 public:
  inline Array() : Array(nullptr) {}
  virtual ~Array();

  Array(const Array& from);
  Array(Array&& from) noexcept
    : Array() {
    *this = ::std::move(from);
  }

  inline Array& operator=(const Array& from) {
    CopyFrom(from);
    return *this;
  }
  inline Array& operator=(Array&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Array& default_instance();

  static inline const Array* internal_default_instance() {
    return reinterpret_cast<const Array*>(
               &_Array_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Array& a, Array& b) {
    a.Swap(&b);
  }
  inline void Swap(Array* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Array* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Array* New() const final {
    return CreateMaybeMessage<Array>(nullptr);
  }

  Array* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Array>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Array& from);
  void MergeFrom(const Array& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Array* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clstm.Array";
  }
  protected:
  explicit Array(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clstm_2eproto);
    return ::descriptor_table_clstm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 2,
    kValueFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated int32 dim = 2;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dim(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_dim() const;
  void _internal_add_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_dim();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 dim(int index) const;
  void set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_dim(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      dim() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_dim();

  // repeated float value = 3;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  private:
  float _internal_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_value() const;
  void _internal_add_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_value();
  public:
  float value(int index) const;
  void set_value(int index, float value);
  void add_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_value();

  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:clstm.Array)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > dim_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_clstm_2eproto;
};
// -------------------------------------------------------------------

class NetworkProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:clstm.NetworkProto) */ {
 public:
  inline NetworkProto() : NetworkProto(nullptr) {}
  virtual ~NetworkProto();

  NetworkProto(const NetworkProto& from);
  NetworkProto(NetworkProto&& from) noexcept
    : NetworkProto() {
    *this = ::std::move(from);
  }

  inline NetworkProto& operator=(const NetworkProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkProto& operator=(NetworkProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkProto& default_instance();

  static inline const NetworkProto* internal_default_instance() {
    return reinterpret_cast<const NetworkProto*>(
               &_NetworkProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NetworkProto& a, NetworkProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkProto* New() const final {
    return CreateMaybeMessage<NetworkProto>(nullptr);
  }

  NetworkProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkProto& from);
  void MergeFrom(const NetworkProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "clstm.NetworkProto";
  }
  protected:
  explicit NetworkProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clstm_2eproto);
    return ::descriptor_table_clstm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIcodecFieldNumber = 12,
    kCodecFieldNumber = 13,
    kAttributeFieldNumber = 20,
    kWeightsFieldNumber = 30,
    kSubFieldNumber = 40,
    kKindFieldNumber = 1,
    kNameFieldNumber = 2,
    kNinputFieldNumber = 10,
    kNoutputFieldNumber = 11,
  };
  // repeated int32 icodec = 12;
  int icodec_size() const;
  private:
  int _internal_icodec_size() const;
  public:
  void clear_icodec();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_icodec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_icodec() const;
  void _internal_add_icodec(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_icodec();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 icodec(int index) const;
  void set_icodec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_icodec(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      icodec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_icodec();

  // repeated int32 codec = 13;
  int codec_size() const;
  private:
  int _internal_codec_size() const;
  public:
  void clear_codec();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_codec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_codec() const;
  void _internal_add_codec(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_codec();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 codec(int index) const;
  void set_codec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_codec(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      codec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_codec();

  // repeated .clstm.KeyValue attribute = 20;
  int attribute_size() const;
  private:
  int _internal_attribute_size() const;
  public:
  void clear_attribute();
  ::clstm::KeyValue* mutable_attribute(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::KeyValue >*
      mutable_attribute();
  private:
  const ::clstm::KeyValue& _internal_attribute(int index) const;
  ::clstm::KeyValue* _internal_add_attribute();
  public:
  const ::clstm::KeyValue& attribute(int index) const;
  ::clstm::KeyValue* add_attribute();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::KeyValue >&
      attribute() const;

  // repeated .clstm.Array weights = 30;
  int weights_size() const;
  private:
  int _internal_weights_size() const;
  public:
  void clear_weights();
  ::clstm::Array* mutable_weights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::Array >*
      mutable_weights();
  private:
  const ::clstm::Array& _internal_weights(int index) const;
  ::clstm::Array* _internal_add_weights();
  public:
  const ::clstm::Array& weights(int index) const;
  ::clstm::Array* add_weights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::Array >&
      weights() const;

  // repeated .clstm.NetworkProto sub = 40;
  int sub_size() const;
  private:
  int _internal_sub_size() const;
  public:
  void clear_sub();
  ::clstm::NetworkProto* mutable_sub(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::NetworkProto >*
      mutable_sub();
  private:
  const ::clstm::NetworkProto& _internal_sub(int index) const;
  ::clstm::NetworkProto* _internal_add_sub();
  public:
  const ::clstm::NetworkProto& sub(int index) const;
  ::clstm::NetworkProto* add_sub();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::NetworkProto >&
      sub() const;

  // required string kind = 1;
  bool has_kind() const;
  private:
  bool _internal_has_kind() const;
  public:
  void clear_kind();
  const std::string& kind() const;
  void set_kind(const std::string& value);
  void set_kind(std::string&& value);
  void set_kind(const char* value);
  void set_kind(const char* value, size_t size);
  std::string* mutable_kind();
  std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 ninput = 10;
  bool has_ninput() const;
  private:
  bool _internal_has_ninput() const;
  public:
  void clear_ninput();
  ::PROTOBUF_NAMESPACE_ID::int32 ninput() const;
  void set_ninput(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ninput() const;
  void _internal_set_ninput(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 noutput = 11;
  bool has_noutput() const;
  private:
  bool _internal_has_noutput() const;
  public:
  void clear_noutput();
  ::PROTOBUF_NAMESPACE_ID::int32 noutput() const;
  void set_noutput(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_noutput() const;
  void _internal_set_noutput(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:clstm.NetworkProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > icodec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > codec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::KeyValue > attribute_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::Array > weights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::NetworkProto > sub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 ninput_;
  ::PROTOBUF_NAMESPACE_ID::int32 noutput_;
  friend struct ::TableStruct_clstm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// required string key = 1;
inline bool KeyValue::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyValue::has_key() const {
  return _internal_has_key();
}
inline void KeyValue::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyValue::key() const {
  // @@protoc_insertion_point(field_get:clstm.KeyValue.key)
  return _internal_key();
}
inline void KeyValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:clstm.KeyValue.key)
}
inline std::string* KeyValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:clstm.KeyValue.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValue::_internal_key() const {
  return key_.Get();
}
inline void KeyValue::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clstm.KeyValue.key)
}
inline void KeyValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clstm.KeyValue.key)
}
inline void KeyValue::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clstm.KeyValue.key)
}
inline std::string* KeyValue::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_key() {
  // @@protoc_insertion_point(field_release:clstm.KeyValue.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clstm.KeyValue.key)
}

// required string value = 2;
inline bool KeyValue::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyValue::has_value() const {
  return _internal_has_value();
}
inline void KeyValue::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:clstm.KeyValue.value)
  return _internal_value();
}
inline void KeyValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:clstm.KeyValue.value)
}
inline std::string* KeyValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:clstm.KeyValue.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValue::_internal_value() const {
  return value_.Get();
}
inline void KeyValue::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValue::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clstm.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clstm.KeyValue.value)
}
inline void KeyValue::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clstm.KeyValue.value)
}
inline std::string* KeyValue::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:clstm.KeyValue.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clstm.KeyValue.value)
}

// -------------------------------------------------------------------

// Array

// optional string name = 1;
inline bool Array::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Array::has_name() const {
  return _internal_has_name();
}
inline void Array::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Array::name() const {
  // @@protoc_insertion_point(field_get:clstm.Array.name)
  return _internal_name();
}
inline void Array::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clstm.Array.name)
}
inline std::string* Array::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clstm.Array.name)
  return _internal_mutable_name();
}
inline const std::string& Array::_internal_name() const {
  return name_.Get();
}
inline void Array::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Array::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clstm.Array.name)
}
inline void Array::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clstm.Array.name)
}
inline void Array::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clstm.Array.name)
}
inline std::string* Array::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Array::release_name() {
  // @@protoc_insertion_point(field_release:clstm.Array.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Array::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clstm.Array.name)
}

// repeated int32 dim = 2;
inline int Array::_internal_dim_size() const {
  return dim_.size();
}
inline int Array::dim_size() const {
  return _internal_dim_size();
}
inline void Array::clear_dim() {
  dim_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Array::dim(int index) const {
  // @@protoc_insertion_point(field_get:clstm.Array.dim)
  return _internal_dim(index);
}
inline void Array::set_dim(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:clstm.Array.dim)
}
inline void Array::_internal_add_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  dim_.Add(value);
}
inline void Array::add_dim(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_dim(value);
  // @@protoc_insertion_point(field_add:clstm.Array.dim)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Array::_internal_dim() const {
  return dim_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Array::dim() const {
  // @@protoc_insertion_point(field_list:clstm.Array.dim)
  return _internal_dim();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Array::_internal_mutable_dim() {
  return &dim_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Array::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:clstm.Array.dim)
  return _internal_mutable_dim();
}

// repeated float value = 3;
inline int Array::_internal_value_size() const {
  return value_.size();
}
inline int Array::value_size() const {
  return _internal_value_size();
}
inline void Array::clear_value() {
  value_.Clear();
}
inline float Array::_internal_value(int index) const {
  return value_.Get(index);
}
inline float Array::value(int index) const {
  // @@protoc_insertion_point(field_get:clstm.Array.value)
  return _internal_value(index);
}
inline void Array::set_value(int index, float value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:clstm.Array.value)
}
inline void Array::_internal_add_value(float value) {
  value_.Add(value);
}
inline void Array::add_value(float value) {
  _internal_add_value(value);
  // @@protoc_insertion_point(field_add:clstm.Array.value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Array::_internal_value() const {
  return value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Array::value() const {
  // @@protoc_insertion_point(field_list:clstm.Array.value)
  return _internal_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Array::_internal_mutable_value() {
  return &value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Array::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:clstm.Array.value)
  return _internal_mutable_value();
}

// -------------------------------------------------------------------

// NetworkProto

// required string kind = 1;
inline bool NetworkProto::_internal_has_kind() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkProto::has_kind() const {
  return _internal_has_kind();
}
inline void NetworkProto::clear_kind() {
  kind_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NetworkProto::kind() const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.kind)
  return _internal_kind();
}
inline void NetworkProto::set_kind(const std::string& value) {
  _internal_set_kind(value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.kind)
}
inline std::string* NetworkProto::mutable_kind() {
  // @@protoc_insertion_point(field_mutable:clstm.NetworkProto.kind)
  return _internal_mutable_kind();
}
inline const std::string& NetworkProto::_internal_kind() const {
  return kind_.Get();
}
inline void NetworkProto::_internal_set_kind(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkProto::set_kind(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  kind_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clstm.NetworkProto.kind)
}
inline void NetworkProto::set_kind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clstm.NetworkProto.kind)
}
inline void NetworkProto::set_kind(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clstm.NetworkProto.kind)
}
inline std::string* NetworkProto::_internal_mutable_kind() {
  _has_bits_[0] |= 0x00000001u;
  return kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkProto::release_kind() {
  // @@protoc_insertion_point(field_release:clstm.NetworkProto.kind)
  if (!_internal_has_kind()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return kind_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkProto::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clstm.NetworkProto.kind)
}

// optional string name = 2;
inline bool NetworkProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkProto::has_name() const {
  return _internal_has_name();
}
inline void NetworkProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NetworkProto::name() const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.name)
  return _internal_name();
}
inline void NetworkProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.name)
}
inline std::string* NetworkProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:clstm.NetworkProto.name)
  return _internal_mutable_name();
}
inline const std::string& NetworkProto::_internal_name() const {
  return name_.Get();
}
inline void NetworkProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NetworkProto::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:clstm.NetworkProto.name)
}
inline void NetworkProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:clstm.NetworkProto.name)
}
inline void NetworkProto::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:clstm.NetworkProto.name)
}
inline std::string* NetworkProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NetworkProto::release_name() {
  // @@protoc_insertion_point(field_release:clstm.NetworkProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetworkProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:clstm.NetworkProto.name)
}

// required int32 ninput = 10;
inline bool NetworkProto::_internal_has_ninput() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkProto::has_ninput() const {
  return _internal_has_ninput();
}
inline void NetworkProto::clear_ninput() {
  ninput_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::_internal_ninput() const {
  return ninput_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::ninput() const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.ninput)
  return _internal_ninput();
}
inline void NetworkProto::_internal_set_ninput(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  ninput_ = value;
}
inline void NetworkProto::set_ninput(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ninput(value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.ninput)
}

// required int32 noutput = 11;
inline bool NetworkProto::_internal_has_noutput() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NetworkProto::has_noutput() const {
  return _internal_has_noutput();
}
inline void NetworkProto::clear_noutput() {
  noutput_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::_internal_noutput() const {
  return noutput_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::noutput() const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.noutput)
  return _internal_noutput();
}
inline void NetworkProto::_internal_set_noutput(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  noutput_ = value;
}
inline void NetworkProto::set_noutput(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_noutput(value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.noutput)
}

// repeated int32 icodec = 12;
inline int NetworkProto::_internal_icodec_size() const {
  return icodec_.size();
}
inline int NetworkProto::icodec_size() const {
  return _internal_icodec_size();
}
inline void NetworkProto::clear_icodec() {
  icodec_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::_internal_icodec(int index) const {
  return icodec_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::icodec(int index) const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.icodec)
  return _internal_icodec(index);
}
inline void NetworkProto::set_icodec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  icodec_.Set(index, value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.icodec)
}
inline void NetworkProto::_internal_add_icodec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  icodec_.Add(value);
}
inline void NetworkProto::add_icodec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_icodec(value);
  // @@protoc_insertion_point(field_add:clstm.NetworkProto.icodec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetworkProto::_internal_icodec() const {
  return icodec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetworkProto::icodec() const {
  // @@protoc_insertion_point(field_list:clstm.NetworkProto.icodec)
  return _internal_icodec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetworkProto::_internal_mutable_icodec() {
  return &icodec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetworkProto::mutable_icodec() {
  // @@protoc_insertion_point(field_mutable_list:clstm.NetworkProto.icodec)
  return _internal_mutable_icodec();
}

// repeated int32 codec = 13;
inline int NetworkProto::_internal_codec_size() const {
  return codec_.size();
}
inline int NetworkProto::codec_size() const {
  return _internal_codec_size();
}
inline void NetworkProto::clear_codec() {
  codec_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::_internal_codec(int index) const {
  return codec_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkProto::codec(int index) const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.codec)
  return _internal_codec(index);
}
inline void NetworkProto::set_codec(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  codec_.Set(index, value);
  // @@protoc_insertion_point(field_set:clstm.NetworkProto.codec)
}
inline void NetworkProto::_internal_add_codec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  codec_.Add(value);
}
inline void NetworkProto::add_codec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_codec(value);
  // @@protoc_insertion_point(field_add:clstm.NetworkProto.codec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetworkProto::_internal_codec() const {
  return codec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
NetworkProto::codec() const {
  // @@protoc_insertion_point(field_list:clstm.NetworkProto.codec)
  return _internal_codec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetworkProto::_internal_mutable_codec() {
  return &codec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
NetworkProto::mutable_codec() {
  // @@protoc_insertion_point(field_mutable_list:clstm.NetworkProto.codec)
  return _internal_mutable_codec();
}

// repeated .clstm.KeyValue attribute = 20;
inline int NetworkProto::_internal_attribute_size() const {
  return attribute_.size();
}
inline int NetworkProto::attribute_size() const {
  return _internal_attribute_size();
}
inline void NetworkProto::clear_attribute() {
  attribute_.Clear();
}
inline ::clstm::KeyValue* NetworkProto::mutable_attribute(int index) {
  // @@protoc_insertion_point(field_mutable:clstm.NetworkProto.attribute)
  return attribute_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::KeyValue >*
NetworkProto::mutable_attribute() {
  // @@protoc_insertion_point(field_mutable_list:clstm.NetworkProto.attribute)
  return &attribute_;
}
inline const ::clstm::KeyValue& NetworkProto::_internal_attribute(int index) const {
  return attribute_.Get(index);
}
inline const ::clstm::KeyValue& NetworkProto::attribute(int index) const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.attribute)
  return _internal_attribute(index);
}
inline ::clstm::KeyValue* NetworkProto::_internal_add_attribute() {
  return attribute_.Add();
}
inline ::clstm::KeyValue* NetworkProto::add_attribute() {
  // @@protoc_insertion_point(field_add:clstm.NetworkProto.attribute)
  return _internal_add_attribute();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::KeyValue >&
NetworkProto::attribute() const {
  // @@protoc_insertion_point(field_list:clstm.NetworkProto.attribute)
  return attribute_;
}

// repeated .clstm.Array weights = 30;
inline int NetworkProto::_internal_weights_size() const {
  return weights_.size();
}
inline int NetworkProto::weights_size() const {
  return _internal_weights_size();
}
inline void NetworkProto::clear_weights() {
  weights_.Clear();
}
inline ::clstm::Array* NetworkProto::mutable_weights(int index) {
  // @@protoc_insertion_point(field_mutable:clstm.NetworkProto.weights)
  return weights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::Array >*
NetworkProto::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:clstm.NetworkProto.weights)
  return &weights_;
}
inline const ::clstm::Array& NetworkProto::_internal_weights(int index) const {
  return weights_.Get(index);
}
inline const ::clstm::Array& NetworkProto::weights(int index) const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.weights)
  return _internal_weights(index);
}
inline ::clstm::Array* NetworkProto::_internal_add_weights() {
  return weights_.Add();
}
inline ::clstm::Array* NetworkProto::add_weights() {
  // @@protoc_insertion_point(field_add:clstm.NetworkProto.weights)
  return _internal_add_weights();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::Array >&
NetworkProto::weights() const {
  // @@protoc_insertion_point(field_list:clstm.NetworkProto.weights)
  return weights_;
}

// repeated .clstm.NetworkProto sub = 40;
inline int NetworkProto::_internal_sub_size() const {
  return sub_.size();
}
inline int NetworkProto::sub_size() const {
  return _internal_sub_size();
}
inline void NetworkProto::clear_sub() {
  sub_.Clear();
}
inline ::clstm::NetworkProto* NetworkProto::mutable_sub(int index) {
  // @@protoc_insertion_point(field_mutable:clstm.NetworkProto.sub)
  return sub_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::NetworkProto >*
NetworkProto::mutable_sub() {
  // @@protoc_insertion_point(field_mutable_list:clstm.NetworkProto.sub)
  return &sub_;
}
inline const ::clstm::NetworkProto& NetworkProto::_internal_sub(int index) const {
  return sub_.Get(index);
}
inline const ::clstm::NetworkProto& NetworkProto::sub(int index) const {
  // @@protoc_insertion_point(field_get:clstm.NetworkProto.sub)
  return _internal_sub(index);
}
inline ::clstm::NetworkProto* NetworkProto::_internal_add_sub() {
  return sub_.Add();
}
inline ::clstm::NetworkProto* NetworkProto::add_sub() {
  // @@protoc_insertion_point(field_add:clstm.NetworkProto.sub)
  return _internal_add_sub();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::clstm::NetworkProto >&
NetworkProto::sub() const {
  // @@protoc_insertion_point(field_list:clstm.NetworkProto.sub)
  return sub_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clstm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clstm_2eproto
